/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two
 * terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 */
struct Fibonacci {
    curr: i64,
    next: i64,
}

impl Fibonacci {
    fn new() -> Fibonacci {
        Fibonacci {
            curr: 0,
            next: 1,
        }
    }
}

impl Iterator for Fibonacci {
    type Item = i64;

    fn next(&mut self) -> Option<i64> {
        let (curr, next) = (self.next, self.curr + self.next);
        self.curr = curr;
        self.next = next;
        Some(self.curr)
    }
}

fn main() {
    let fibonacci = Fibonacci::new();
    let answer: i64 = fibonacci.filter(|&x| x & 1 == 0)
        .take_while(|&x| x < 4_000_000)
        .sum();
    println!("{}", answer);
}
