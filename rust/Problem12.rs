/*
 * The sequence of triangle numbers is generated by adding the natural numbers. So
 * the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
 * terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *      1: 1
 *      3: 1,3
 *      6: 1,2,3,6
 *     10: 1,2,5,10
 *     15: 1,3,5,15
 *     21: 1,3,7,21
 *     28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */

struct Triangulars {
    current: i64,
    difference: i64
}

impl Triangulars {
    fn new() -> Triangulars {
        Triangulars {
            current: 0,
            difference: 1
        }
    }
}

impl Iterator for Triangulars {
    type Item = i64;

    fn next(&mut self) -> Option<i64> {
        self.current += self.difference;
        self.difference += 1;
        Some(self.current)
    }
}

fn divisors_count(x: i64) -> usize {
    let mut x = x;
    let mut result = 1;
    let mut i = 1;
    let mut d = 2;
    while x >= d {
        if x % d == 0 {
            x /= d;
            i += 1;
        } else {
            result *= i;
            i = 1;
            d += 1;
        }
    }
    result *= i;
    result
}

fn main() {
    let mut triangulars = Triangulars::new();
    let answer = triangulars.find(|&x| divisors_count(x) >= 500).unwrap();
    println!("{}", answer);
}
