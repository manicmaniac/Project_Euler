# coding:utf-8
"""
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""

import itertools

def triangulars():
    x = 0
    for i in itertools.count(0):
        x += i
        yield x

def count_divisors(x):
    result = 1
    i = 1
    d = 2
    while x >= d:
        if x % d:
            result *= i
            i = 1
            d += 1
        else:
            x /= d
            i += 1
    result *= i
    return result


if __name__ == '__main__':
    for i in triangulars():
        if count_divisors(i) > 500:
            break
    print(i)
